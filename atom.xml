<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LINJING BI</title>
  
  <subtitle>biubiubiu...</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-11-16T14:45:21.299Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Bi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Dijkstra 找最短路径</title>
    <link href="http://yoursite.com/2018/11/16/Dijkstra/"/>
    <id>http://yoursite.com/2018/11/16/Dijkstra/</id>
    <published>2018-11-16T14:43:54.000Z</published>
    <updated>2018-11-16T14:45:21.299Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="加权图" scheme="http://yoursite.com/tags/%E5%8A%A0%E6%9D%83%E5%9B%BE/"/>
    
      <category term="最短路径" scheme="http://yoursite.com/tags/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/"/>
    
  </entry>
  
  <entry>
    <title>可适应性优先级队列（基于堆）</title>
    <link href="http://yoursite.com/2018/11/16/AdaptableHeapPriorityQueue/"/>
    <id>http://yoursite.com/2018/11/16/AdaptableHeapPriorityQueue/</id>
    <published>2018-11-16T13:31:40.000Z</published>
    <updated>2018-11-16T14:43:28.453Z</updated>
    
    <content type="html"><![CDATA[<p>由于传统的堆并不支持对堆中除头和尾以外的位置的增删改，而在实际情况下我们需要对其他节点进行操作。这里我们在堆原有数据结构基础上进行扩展，<br>用’定位器‘来实现对堆中其他元素的定位。定位器是指在堆原有节点类中加入一个新属性_index（节点在底层数据结构数组中的秩），然后实列化节点类（locator），<br>并返回给用户用来定位每一个节点。<br>下面我们先展示基于原始堆的优先级排序数据结构的代码：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#python3</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HeapPriorityQueue</span>:</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">_Item</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, key, value)</span>:</span></span><br><span class="line">            self._key = key</span><br><span class="line">            self._val = value</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__lt__</span><span class="params">(self, other)</span>:</span></span><br><span class="line">            <span class="keyword">return</span> self._key &lt; other._key</span><br><span class="line"><span class="comment">### private behaviours</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_left</span><span class="params">(self, j)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>*j+<span class="number">2</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_right</span><span class="params">(self, j)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>*j+<span class="number">1</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_parent</span><span class="params">(self, j)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> (j<span class="number">-1</span>)//<span class="number">2</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_has_left</span><span class="params">(self, j)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._left(j) &lt; len(self._data)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_has_right</span><span class="params">(self, j)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self._right(j) &lt; len(self._data)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_swap</span><span class="params">(self, i, j)</span>:</span>        </span><br><span class="line">        self._data[i], self._data[j] = self._data[j], self._data[i]</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_downheap</span><span class="params">(self, j)</span>:</span>   <span class="comment">#向下冒泡</span></span><br><span class="line">        <span class="keyword">if</span> self._has_right(j):</span><br><span class="line">            small = self._right(j)</span><br><span class="line">            <span class="keyword">if</span> self._has_left(j):</span><br><span class="line">                <span class="keyword">if</span> self._data[self._left(j)] &lt; self._data[small]:</span><br><span class="line">                    small = self._left(j)</span><br><span class="line">            <span class="keyword">if</span> self._data[small] &lt; self._data[j]:</span><br><span class="line">                self._swap(small, j)</span><br><span class="line">                self._downheap(small)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_upheap</span><span class="params">(self, j)</span>:</span>   <span class="comment">#向上冒泡</span></span><br><span class="line">        <span class="keyword">if</span> j &gt; <span class="number">0</span> <span class="keyword">and</span> self._data[j] &lt; self._data[self._parent(j)]:</span><br><span class="line">            self._swap(j, self._parent(j))</span><br><span class="line">            self._upheap(self._parent(j)) </span><br><span class="line"><span class="comment">###public behaviours</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self._data = []</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__len__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> len(self._data)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_empty</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> len(self)==<span class="number">0</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(self, k, v)</span>:</span></span><br><span class="line">        self._data.append(self._Item(k,v))</span><br><span class="line">        self._upheap(len(self._data)<span class="number">-1</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">min</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.is_empty():</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'heap is empty'</span>)</span><br><span class="line">        <span class="keyword">return</span> self._data[<span class="number">0</span>]._key, self._data[<span class="number">0</span>].val</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">remove_min</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.is_empty():</span><br><span class="line">            <span class="keyword">raise</span> ValueError</span><br><span class="line">        self._swap(<span class="number">0</span>, len(self._data)<span class="number">-1</span>)</span><br><span class="line">        item = self._data.pop()</span><br><span class="line">        self._downheap(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> (item._key, item._val)</span><br></pre></td></tr></table></figure></p><p>接下来是适应性优先级队列，对于这个我们提供两种新方法：update（更新堆中某一节点），remove（删除某一节点）。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#python3</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AdapatablePriorityHeapQueue</span>:</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Locator</span><span class="params">(HeapProrityQueue._Item)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, k, v, index)</span>:</span></span><br><span class="line">            super().__init__(k,v)</span><br><span class="line">            self._index = index</span><br><span class="line"><span class="comment">### private behaviours    </span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_swap</span><span class="params">(self, i, j)</span>:</span></span><br><span class="line">        super()._swap(i, j)</span><br><span class="line">        self._data[i]._index = i</span><br><span class="line">        self._data[j]._index = j</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_bubble</span><span class="params">(self, j)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="number">0</span>&lt;j <span class="keyword">and</span> self._data[j] &lt; self._data[self._parent(j)]:</span><br><span class="line">            self._upheap(j)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self._downheap(j)</span><br><span class="line"><span class="comment">### public behaviours</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(self, k, v)</span>:</span></span><br><span class="line">        loc = self.Locator(k, v, len(self))</span><br><span class="line">        self._data.append(loc)</span><br><span class="line">        self._upheap(len(self._data)<span class="number">-1</span>)</span><br><span class="line">        <span class="keyword">return</span> loc</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self, loc, k, v)</span>:</span></span><br><span class="line">        j = loc._index</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> (<span class="number">0</span>&lt;=j&lt;len(self)) <span class="keyword">and</span> self._data[j]==loc:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'invalid locator'</span>)</span><br><span class="line">        loc._key = k</span><br><span class="line">        loc._val = v</span><br><span class="line">        <span class="keyword">return</span> loc</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">remove</span><span class="params">(self, loc)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.is_empty():</span><br><span class="line">            <span class="keyword">raise</span> ValueError</span><br><span class="line">        j = loc._index</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> (<span class="number">0</span>&lt;=j&lt;len(self)) <span class="keyword">and</span> self._data[j]==loc:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">'invalid locator'</span>)</span><br><span class="line">        <span class="keyword">if</span> j != len(self)<span class="number">-1</span>:</span><br><span class="line">            self._swap(j, len(self)<span class="number">-1</span>)</span><br><span class="line">            self._bubble(j)</span><br><span class="line">        self._data.pop()</span><br><span class="line">        <span class="keyword">return</span> (loc._key, loc._val)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;由于传统的堆并不支持对堆中除头和尾以外的位置的增删改，而在实际情况下我们需要对其他节点进行操作。这里我们在堆原有数据结构基础上进行扩展，&lt;br&gt;用’定位器‘来实现对堆中其他元素的定位。定位器是指在堆原有节点类中加入一个新属性_index（节点在底层数据结构数组中的秩），然后
      
    
    </summary>
    
      <category term="数据结构" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="堆" scheme="http://yoursite.com/tags/%E5%A0%86/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 25 k个一组反转链表</title>
    <link href="http://yoursite.com/2018/11/16/leetcode-25/"/>
    <id>http://yoursite.com/2018/11/16/leetcode-25/</id>
    <published>2018-11-16T04:23:49.000Z</published>
    <updated>2018-11-16T05:01:00.982Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h3><pre><code>给出一个链表，每k个一组进行翻转，并返回翻转后的链表。如果节点总数不是k的整数倍，那么将剩余节点保持原序返回。例子：    给出：1-&gt;2-&gt;3-&gt;4-&gt;5, k=3    输出：3-&gt;2-&gt;1-&gt;4-&gt;5说明：    1. 你的算法只能使用常数的额外空间    2. 不能单纯的改变节点的值，需要对实际节点进行交换</code></pre><p>首先要判断链表长度是否大于k，然后再进行分组翻转。由于会有剩余部分，不要忽略翻转完毕后对剩余部分的重新连接。<br><a id="more"></a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#python 3</span></span><br><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverseKGroup</span><span class="params">(self, head, k)</span>:</span></span><br><span class="line">        length = <span class="number">0</span></span><br><span class="line">        start = head</span><br><span class="line">        pre = cur = new = <span class="keyword">None</span></span><br><span class="line">        <span class="keyword">while</span> head:</span><br><span class="line">            head = head.next</span><br><span class="line">            length += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> k &gt; length: <span class="keyword">return</span> start  <span class="comment">#!!!start is the original head, head already move to NULL!!!</span></span><br><span class="line">        t = length // k</span><br><span class="line">        <span class="keyword">while</span> t &gt; <span class="number">0</span>:</span><br><span class="line">            cur, new = self.reverse(start, k)</span><br><span class="line">            <span class="keyword">if</span> pre <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">                res = cur <span class="comment">#!!!cur is the new head not start!!!</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                pre.next = cur</span><br><span class="line">            pre = start</span><br><span class="line">            start = new</span><br><span class="line">            t -= <span class="number">1</span></span><br><span class="line">        pre.next = start <span class="comment">#!!!do not forget to connect the rest of the list!!!</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverse</span><span class="params">(self, start, k)</span>:</span></span><br><span class="line">        cur, pre = start, <span class="keyword">None</span></span><br><span class="line">        <span class="keyword">while</span> k &gt; <span class="number">0</span>:</span><br><span class="line">            temp = cur.next</span><br><span class="line">            cur.next = pre</span><br><span class="line">            pre = cur</span><br><span class="line">            cur = temp</span><br><span class="line">            k -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> pre, cur</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;题目：&quot;&gt;&lt;a href=&quot;#题目：&quot; class=&quot;headerlink&quot; title=&quot;题目：&quot;&gt;&lt;/a&gt;题目：&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;给出一个链表，每k个一组进行翻转，并返回翻转后的链表。
如果节点总数不是k的整数倍，那么将剩余节点保持原序返回。
例子：
    给出：1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;5, k=3
    输出：3-&amp;gt;2-&amp;gt;1-&amp;gt;4-&amp;gt;5
说明：
    1. 你的算法只能使用常数的额外空间
    2. 不能单纯的改变节点的值，需要对实际节点进行交换
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;首先要判断链表长度是否大于k，然后再进行分组翻转。由于会有剩余部分，不要忽略翻转完毕后对剩余部分的重新连接。&lt;br&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="hard" scheme="http://yoursite.com/tags/hard/"/>
    
      <category term="链表" scheme="http://yoursite.com/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 92 反转m到n的链表</title>
    <link href="http://yoursite.com/2018/11/14/leetcode-92/"/>
    <id>http://yoursite.com/2018/11/14/leetcode-92/</id>
    <published>2018-11-14T15:47:01.000Z</published>
    <updated>2018-11-16T05:00:58.834Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h3><pre><code>反转从位置m到n的链表。请使用一趟扫描完成反转。(1&lt;=m&lt;=n&lt;=lenofthelist)例子:    input：1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL, m=2, n=4    output: 1-&gt;4-&gt;3-&gt;2-&gt;5-&gt;NULL    </code></pre><p>首先记录m-1的节点(front)，然后依次倒置[m,n]之间的节点，期间还要注意m节点的收藏(tail)，用来设置tail.next=back，然后记录n+1(back)节点，最后完成n+1，m-1连接。由于倒置是通过不停的选择next节点来完成，为了防止陷入死循环，本次节点(cur)与本次节点next节点(temp)的关系倒置要放到下一次循环中处理，这就需要我们引入pre来记录本次节点。<br>简而言之，介于[m,n]间的单次循环要完成两项任务：1. 设置temp 2. 完成cur.next = pre。<br>另外，几个需要注意的小细节，这里的m,n指的是位置，不是类似于数组的秩，是从1开始的。所以在循环倒置时，i也应先加1，表示此次是对第一个位置操作。<br><a href="https://leetcode.com/problems/reverse-linked-list-ii/discuss/184849/Python-Solution-20ms-beats-100?from=singlemessage&amp;isappinstalled=0" target="_blank" rel="noopener">代码来源</a><br><a id="more"></a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#python3</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverseBetween</span><span class="params">(self, head, m, n)</span>:</span></span><br><span class="line">        cur = head</span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        back = tail = front = pre = <span class="keyword">None</span></span><br><span class="line">        <span class="keyword">while</span> cur <span class="keyword">and</span> i &lt; n+<span class="number">1</span>:</span><br><span class="line">            i += <span class="number">1</span>             </span><br><span class="line">            <span class="keyword">if</span> m &lt;= i &lt;= n:</span><br><span class="line">                tmp = cur.next <span class="comment">#task 1</span></span><br><span class="line">                <span class="keyword">if</span> pre <span class="keyword">is</span> <span class="keyword">None</span>:</span><br><span class="line">                    tail = cur <span class="comment">#record m</span></span><br><span class="line">                cur.next = pre <span class="comment">#task 2</span></span><br><span class="line">                pre = cur</span><br><span class="line">                cur = tmp</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> i == m<span class="number">-1</span>:</span><br><span class="line">                    front = cur <span class="comment">#record m-1</span></span><br><span class="line">                <span class="keyword">elif</span> i == n+<span class="number">1</span>:</span><br><span class="line">                    back = cur</span><br><span class="line">                cur = cur.next <span class="comment"># !!move to the next!!</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> front:</span><br><span class="line">            front.next = pre</span><br><span class="line">            res = head</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            res = pre</span><br><span class="line">        tail.next = back</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;题目：&quot;&gt;&lt;a href=&quot;#题目：&quot; class=&quot;headerlink&quot; title=&quot;题目：&quot;&gt;&lt;/a&gt;题目：&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;反转从位置m到n的链表。请使用一趟扫描完成反转。(1&amp;lt;=m&amp;lt;=n&amp;lt;=lenofthelist)
例子:
    input：1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;5-&amp;gt;NULL, m=2, n=4
    output: 1-&amp;gt;4-&amp;gt;3-&amp;gt;2-&amp;gt;5-&amp;gt;NULL    
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;首先记录m-1的节点(front)，然后依次倒置[m,n]之间的节点，期间还要注意m节点的收藏(tail)，用来设置tail.next=back，然后记录n+1(back)节点，最后完成n+1，m-1连接。由于倒置是通过不停的选择next节点来完成，为了防止陷入死循环，本次节点(cur)与本次节点next节点(temp)的关系倒置要放到下一次循环中处理，这就需要我们引入pre来记录本次节点。&lt;br&gt;简而言之，介于[m,n]间的单次循环要完成两项任务：1. 设置temp 2. 完成cur.next = pre。&lt;br&gt;另外，几个需要注意的小细节，这里的m,n指的是位置，不是类似于数组的秩，是从1开始的。所以在循环倒置时，i也应先加1，表示此次是对第一个位置操作。&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/reverse-linked-list-ii/discuss/184849/Python-Solution-20ms-beats-100?from=singlemessage&amp;amp;isappinstalled=0&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;代码来源&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="leetcode" scheme="http://yoursite.com/categories/leetcode/"/>
    
    
      <category term="leetcode" scheme="http://yoursite.com/tags/leetcode/"/>
    
      <category term="链表" scheme="http://yoursite.com/tags/%E9%93%BE%E8%A1%A8/"/>
    
      <category term="medium" scheme="http://yoursite.com/tags/medium/"/>
    
  </entry>
  
  <entry>
    <title>HEXO部署到GitHub.io搭建个人博客</title>
    <link href="http://yoursite.com/2018/11/13/HEXO%E9%83%A8%E7%BD%B2/"/>
    <id>http://yoursite.com/2018/11/13/HEXO部署/</id>
    <published>2018-11-13T12:07:42.000Z</published>
    <updated>2018-11-14T17:06:18.837Z</updated>
    
    <content type="html"><![CDATA[<h2 id="install-git"><a href="#install-git" class="headerlink" title="install git"></a><a href="https://github.com/funcab/notes/blob/master/git/usage.md" target="_blank" rel="noopener">install git</a></h2><h2 id="install-Node-js"><a href="#install-Node-js" class="headerlink" title="install Node.js"></a>install Node.js</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl https://raw.github.com/creationix/nvm/v0.33.11/install.sh | sh</span><br></pre></td></tr></table></figure><p>Close and reopen your terminal to start using nvm or run the following to use it now:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export NVM_DIR=&quot;$HOME/.nvm&quot;</span><br><span class="line">[ -s &quot;$NVM_DIR/nvm.sh&quot; ] &amp;&amp; \. &quot;$NVM_DIR/nvm.sh&quot;  # This loads nvm</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm install stable</span><br></pre></td></tr></table></figure><a id="more"></a> <h2 id="install-Hexo-and-init"><a href="#install-Hexo-and-init" class="headerlink" title="install Hexo and init"></a>install Hexo and init</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br><span class="line">mkdir &lt;folder&gt;</span><br><span class="line">hexo init &lt;folder&gt;</span><br><span class="line">cd &lt;folder&gt;</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><h2 id="install-NexT"><a href="#install-NexT" class="headerlink" title="install NexT"></a>install NexT</h2><p>Download latest release version:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir themes/next</span><br><span class="line">curl -s https://api.github.com/repos/iissnan/hexo-theme-next/releases/latest | grep tarball_url </span><br><span class="line">| cut -d &apos;&quot;&apos; -f 4 | wget -i - -O- | tar -zx -C themes/next --strip-components=1</span><br></pre></td></tr></table></figure></p><p>Set theme in main hexo root config _config.yml file:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure></p><h2 id="github-pages"><a href="#github-pages" class="headerlink" title="github pages"></a>github pages</h2><p>install plugins:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></p><p>edit <folder>/_config.yml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://[github用户名]:[github密码]@github.com/xxx/xxx.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></folder></p><p>push to github：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g &amp;&amp; hexo deploy</span><br></pre></td></tr></table></figure></p><p>publish new blog:<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new &apos;blogname&apos;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;install-git&quot;&gt;&lt;a href=&quot;#install-git&quot; class=&quot;headerlink&quot; title=&quot;install git&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/funcab/notes/blob/master/git/usage.md&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;install git&lt;/a&gt;&lt;/h2&gt;&lt;h2 id=&quot;install-Node-js&quot;&gt;&lt;a href=&quot;#install-Node-js&quot; class=&quot;headerlink&quot; title=&quot;install Node.js&quot;&gt;&lt;/a&gt;install Node.js&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;curl https://raw.github.com/creationix/nvm/v0.33.11/install.sh | sh&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Close and reopen your terminal to start using nvm or run the following to use it now:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;export NVM_DIR=&amp;quot;$HOME/.nvm&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[ -s &amp;quot;$NVM_DIR/nvm.sh&amp;quot; ] &amp;amp;&amp;amp; \. &amp;quot;$NVM_DIR/nvm.sh&amp;quot;  # This loads nvm&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;nvm install stable&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="HEXO" scheme="http://yoursite.com/tags/HEXO/"/>
    
      <category term="搭建个人博客" scheme="http://yoursite.com/tags/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
</feed>
